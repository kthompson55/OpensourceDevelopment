package service;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Stack;

import models.Item;
import exceptions.ItemServiceException;

public class ServerItemService implements ItemService 
{
	private File f;
	private BufferedReader reader;
	private PrintWriter writer;
	private FileOutputStream foStream;
	private Map<Long, Item> items;
	
	private long keyCount;
	
	public ServerItemService() throws FileNotFoundException
	{
		items = new HashMap<>();
		f = new File("ItemLog.txt");
		if(f.exists())
		{
			try 
			{
				f.createNewFile();
			} 
			catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		else
		{
			createStartingState();
		}
		foStream = new FileOutputStream(f);
		writer = new PrintWriter(foStream,true);
		
		keyCount = 0;
	}
	
	private void createStartingState()
	{
		try 
		{
			BufferedReader fileReader = new BufferedReader(new InputStreamReader(new FileInputStream(f)));
		} 
		catch (FileNotFoundException e) 
		{
			String line;
			while((line = fileReader.readLine()) != "")
			{
				
			}
		}
	}
	
	public void CloseStreams() throws IOException
	{
		reader.close();
		writer.close();
	}
	
	@Override
	public void addItem(Item newItem) throws ItemServiceException 
	{
		items.put(newItem.getId(),newItem);
		
		DecimalFormat fmt = new DecimalFormat("#0.00");
        StringBuilder sb = new StringBuilder();
        sb.append("c|").append(newItem.getId()).append("|").append(newItem.getName()).append("|").append(newItem.getDescription()).append("|").append(fmt.format(newItem.getPrice())).append("|");
        sb.append(newItem.getStartDate()).append("|").append(newItem.getEndDate()).append("|").append(newItem.getImage());
        writer.println(sb.toString());
	}

	@Override
	public Item updateItem(Item newItem) throws ItemServiceException
	{
		Item ret = null;
		
		DecimalFormat fmt = new DecimalFormat("#0.00");
		StringBuilder sb = new StringBuilder();
        sb.append("u|").append(newItem.getId()).append("|").append(newItem.getName()).append("|").append(newItem.getDescription()).append("|").append(fmt.format(newItem.getPrice())).append("|");
        sb.append(newItem.getStartDate()).append("|").append(newItem.getEndDate()).append("|").append(newItem.getImage());
        ret = newItem;
        
        items.put(ret.getId(),ret);
        writer.println(sb.toString());
        
        return ret;
	}

	@Override
	public void deleteItem(long id) throws ItemServiceException 
	{
        StringBuilder sb = new StringBuilder();
        sb.append("d|").append(id);
        writer.println(sb.toString());
        
        items.remove(id);
	}

	@Override
	public List<Item> search(String query) 
	{
		List<Item> results = new ArrayList<Item>();

        String[] tokens = query.split(" ");
        Stack<String> operators = new Stack<String>();
        Queue<String> output = new PriorityQueue<String>();
        List<String> andBlocks = new ArrayList<String>();

        for(String token : tokens)
        {
            if(token.toLowerCase().equals("and"))
            {
                operators.push(token);
            }
            else if(token.toLowerCase().equals("or"))
            {
                String andStatement = output.poll() + ",";
                if(!operators.empty())
                {
                    while (operators.peek().equals("and"))
                    {
                        operators.pop();
                        andStatement += output.poll() + ",";
                        if(operators.empty()) break;
                    }
                }
                operators.push(token);
                andBlocks.add(andStatement);
            }
            else output.add(token);
        }
        andBlocks.add(output.poll() + ",");

        // Sue me.
        for(Item i : items.values())
        {
            boolean addedOnce = false;
            for(String terms : andBlocks)
            {
                String[] individualTerms = terms.split(",");
                for(String curTerm : individualTerms)
                {
                    boolean inName = i.getName().toLowerCase().contains(curTerm.toLowerCase());
                    boolean inDesc = i.getDescription().toLowerCase().contains(curTerm.toLowerCase());
                    addedOnce = addedOnce || (inName || inDesc);
                }
            }
            if(addedOnce)
            {
                results.add(i);
            }
        }

        return results;
	}
	
	@Override
	public long getId()
	{
		return keyCount++;
	}

	@Override
	public Item bid(long id, BigDecimal bidIncrease) throws ItemServiceException
	{
		items.get(id).setPrice(items.get(id).increaseBid(bidIncrease));
        return items.get(id);
	}

	@Override
	public Item findItem(long id) 
	{
		Item ret = null;
        if(items.keySet().contains(id))
        {
            ret = items.get(id);
        }
        return ret;
	}
	
	public long findItemId(String itemName)
    {
        long ret = -1;
        for(Item i : items.values())
        {
        	if(i.getName().equals(itemName))
        	{
        		ret = i.getId();
        		break;
        	}
        }
        return ret;
    }
}
